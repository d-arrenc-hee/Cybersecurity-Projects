#!/bin/bash 

# Default password list
Default_password_list="pass.lst"
Default_user_list="user.lst"


function network_input_check()
{
    input=$1
    # Regex for IPv4 address
    ipv4_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"
    # Regex for domain name
    domain_regex="^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$"

    # Check if input is empty
    if [[ -z "$input" ]]; then
        echo "Error: Input cannot be empty."
        return 1
    fi

    # Check if input matches IPv4 regex
    if [[ $input =~ $ipv4_regex ]]; then
        # Check if each octet of IPv4 is within 0-255
        IFS='.' read -ra octets <<< "$input"
        for octet in "${octets[@]}"; do
            if ((octet < 0 || octet > 255)); then
                echo "Error: Invalid IPv4 address (octet out of range)."
                return 1
            fi
        done
        return 0
    # Check if input matches domain name regex
    elif [[ $input =~ $domain_regex ]]; then
        return 0
    else
        echo "Error: Invalid input. Must be a valid IPv4 address or domain name."
        return 1
    fi
}

function file_name_check()
{
    input=$1
    # Check for invalid characters
    if [[ "$input" =~ [/\\:\*\?\"\<\>\|] ]]; then
        echo "Error: File name contains invalid characters."
        return 1
    fi

    # Check if the filename starts with a hyphen
    if [[ "$input" =~ ^- ]]; then
        echo "Error: File name cannot start with a hyphen."
        return 1
    fi

    # Check if the filename is too long
    if [[ ${#input} -gt 255 ]]; then
        echo "Error: File name is too long."
        return 1
    fi

    # If all checks pass, the filename is valid
    return 0
}

function Nmap_scan()
{

# Scan the network for TCP and UDP service 
nmap "$network_input" -sU -sT -Pn -sV --open -F

}

function Service_option()
{
    echo "Select your service to test your password strength: "


    read -p "Enter your choice: " choice

    case $choice in 
        1) 
            run_hydra ssh
            ;;
        2)
            run_hydra rdp
            ;;
        3)
            run_hydra ftp
            ;;
        4)
            run_hydra telnet
            ;;
        5)
            echo "Exiting.."
            exit 1
            ;;
    esac

}

function run_hydra()
{

    read -p "Enter your usename: " user_name
    read -p "Enter the port number: " port
    read -p "Would you like to input a password list? (Y/N): " password_list_option
    if [[ "$password_list_option" == "Y" || "$password_list_option" == "y" ]]; then
        read -p "Input your password list file path: " password_list
        if [[ ! -f "$password_list" ]]; then 
            echo "File does not exist. Exiting ..."
            exit 1
        fi
    else 
        password_list="~/Desktop/Pen_test_project/pass.lst"
    fi

    # Run hydra in the background and capture its output
    hydra_output=$(hydra -t 4 -l "$user_name" -P "$password_list" $1://"$network_input":"$port" 2>&1)

    successful_login=$(echo "$hydra_output" | grep "login: " | tail -n 1)
    if [[ -n "$successful_login" ]]; then 
        echo "Password has been cracked. Password is weak"
    else
        echo "Password is acceptable"
        exit 1
    fi 


}

function Basic_input()
{

    Nmap_scan
    Service_option

}




function MAIN()
{
    while true
    do
        # 1.1 Get from the user a network to scan 
        read -p "[?] Please enter a domain or IP address: " network_input
        if network_input_check "$network_input"
        then
            break
        fi
    done

    while true 
    do
        read -p "[?] Please enter a name for the file: " file_name
        if file_name_check "$file_name"
        then
            break
        fi
    done
        echo -e "[#] Please read the following option. \n[#] Basic - Scans the network for TCP and UDP, including the service version and weak passwords \n[#] Full - Nmap Scripting (NSE), weak passwords and vulnerability analysis"
    while true 
    do
        read -p "[?] Please input your option (Basic or Full): " scan_input
        # converting user input to lowercase 
        lowercase_input=$(echo "$scan_input" | awk '{print tolower($0)}')
        if [[ $lowercase_input == 'basic' ]]
        then 
            Basic_input
            break

        fi
    done

    


}
MAIN
